// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_tokens.sql

package queries

import (
	"context"
)

const getUserByToken = `-- name: GetUserByToken :one
select u.id, u.email, u.display_name, u.password_hash, u.inserted_at, u.updated_at from users u join user_tokens ut on u.id = ut.user_id where ut.token = $1 and ut.context = $2 and ut.inserted_at > (now() at time zone 'utc') - ($3::int * interval '1 day')
`

type GetUserByTokenParams struct {
	Token        []byte
	Context      string
	ValidityDays int32
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByToken, arg.Token, arg.Context, arg.ValidityDays)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.PasswordHash,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertUserToken = `-- name: InsertUserToken :one
insert into user_tokens (user_id, token, context) values ($1, $2, $3) returning id, user_id, token, context, inserted_at
`

type InsertUserTokenParams struct {
	UserID  int64
	Token   []byte
	Context string
}

func (q *Queries) InsertUserToken(ctx context.Context, arg InsertUserTokenParams) (*UserToken, error) {
	row := q.db.QueryRow(ctx, insertUserToken, arg.UserID, arg.Token, arg.Context)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Context,
		&i.InsertedAt,
	)
	return &i, err
}
